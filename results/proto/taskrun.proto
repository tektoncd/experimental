syntax = "proto3";

package tekton.pipeline.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "./proto";

message TaskRun {
	// TODO: add some uniqueness token here (hash of cluster info?)
	// UID is only guaranteed to be unique per-cluster, so two clusters
	// might report colliding UIDs.

	string api_version = 1;
	string kind = 2; // TODO: must always be TaskRun?

	ObjectMeta metadata = 3;

	TaskRunSpec spec = 4;
	TaskRunStatus status = 5;
	// TODO: Add the rest of the fields. Generate this from Go structs?
}

message ObjectMeta {
	string name = 1;
	string generate_name = 2;
	string namespace = 3;
	string uid = 4;
	int64 generation = 5;
	google.protobuf.Timestamp creation_timestamp = 6;
	google.protobuf.Timestamp deletion_timestamp = 7;
	map<string,string> labels = 8;
	map<string,string> annotations = 9;
}

message TaskRunSpec {
	TaskSpec task_spec = 5;
	google.protobuf.Duration timeout = 7;
	// TODO: workspaces, resources, results, etc.
}

message TaskSpec {
	repeated Step steps = 1;
	repeated Volume volumes = 2;
	// TODO: step_template
	repeated Step sidecars = 4;
}

message Step {
	string name = 1;
	string image = 2;
	repeated string command = 3;
	repeated string args = 4;
	string working_dir = 5;
	repeated EnvVar env = 6;
	// TODO: EnvFrom
	repeated VolumeMount volume_mounts = 7;
	string script = 8;
}

message EnvVar {
	string name = 1;
	string value = 2;
}

message Volume {
	string name = 1;
	oneof source {
		EmptyDir empty_dir = 2;
		// TODO: PVC, Secret, ConfigMap
	}
}

message EmptyDir {}

message VolumeMount {
	string name = 1;
	string mount_path = 2;
	bool read_only = 3;
	string sub_path = 4;
}

message TaskRunStatus {
	repeated Condition conditions = 1;
	int64 observed_generation = 2;
	string pod_name = 3;
	google.protobuf.Timestamp start_time = 4;
	google.protobuf.Timestamp completion_time = 5;
	repeated StepState steps = 6;
	TaskSpec task_spec = 7;
}

message StepState {
	string name = 1;
	string container_name = 2 [json_name="container"];
	string image_id = 3 [json_name="imageID"];
	oneof status {
		ContainerStateWaiting waiting = 4;
		ContainerStateRunning running = 5;
		ContainerStateTerminated terminated = 6;
	}
}

message ContainerStateWaiting {
	string reason = 1;
	string message = 2;
}

message ContainerStateRunning {
	google.protobuf.Timestamp started_at = 1;
}

message ContainerStateTerminated {
	int32 exit_code = 1;
	int32 signal = 2;
	string reason = 3;
	string message = 4;
	google.protobuf.Timestamp started_at = 5;
	google.protobuf.Timestamp finished_at = 6;
	string container_id = 7 [json_name="containerID"];
}

message Condition {
	string type = 1;
	string status = 2;
	string severity = 3;
	google.protobuf.Timestamp last_transition_time = 4;
	string reason = 5;
	string message = 6;
}

message PipelineRun {

}