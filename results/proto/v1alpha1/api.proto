syntax = "proto3";

package tekton.results.v1alpha1;

import "taskrun.proto";
import "pipelinerun.proto";
import "google/api/field_behavior.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

option go_package = "github.com/tektoncd/experimental/results/proto/v1alpha1/results_go_proto";

service Results {
  rpc CreateResult(CreateResultRequest) returns (Result) {
    option (google.api.http) = {
      post: "/v1/{parent=*}/results"
      body: "result"
    };
  }

  rpc UpdateResult(UpdateResultRequest) returns (Result) {
    option (google.api.http) = {
      patch: "/v1/{result.name=*/results/*}"
      body: "result"
    };
  }

  rpc GetResult(GetResultRequest) returns (Result) {
    option (google.api.http) = {
      get: "/v1/{name=*/results/*}"
    };
  }

  rpc DeleteResult(DeleteResultRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=*/results/*}"
    };
  }
  rpc ListResults(ListResultsRequest) returns (ListResultsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=*}/results"
    };
  }
}

message Result {
  // Server assigned identifier of the Result.
  // Encodes parent information.
  //
  // Examples: namespace/default/results/1234
  //           cluster/<cluster-id>/namespace/tekton/results/1234
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

	// Server assigned timestamp for when the result was created.
  google.protobuf.Timestamp created_time = 2
      [(google.api.field_behavior) = OUTPUT_ONLY];

  // Arbitrary user provided labels for the result.
  map<string, string> annotations = 3;

	// Execution artifacts part of this result. Typically will be Tekton
	// Task/PipelineRuns, but may also include other execution information
	// (e.g. post-processing tasks, DSLs, etc.)
  repeated Execution executions = 4;

  // Other artifacts, etc that don't fit elsewhere can be added here until
  // promoted to a top level type.
  map<string, google.protobuf.Any> extensions = 5;

  // The etag for this result.
  // If this is provided on update, it must match the server's etag.
  string etag = 6
      [(google.api.field_behavior) = OUTPUT_ONLY];
}

message Execution {
  oneof execution {
    tekton.pipeline.v1beta1.TaskRun task_run = 1;
    tekton.pipeline.v1beta1.PipelineRun pipeline_run = 2;

    // Additional execution types not covered above (e.g. DSLs).
    google.protobuf.Any opaque = 3;
  }
}

message TriggerEvent {
  // Identifier of the request, generally provided by the external integration
  // (e.g. value of X-GitHub-Delivery).
  string event_id = 1;

  // Status of the Trigger Event.
  // If omitted, assumed OK with no details.
  //
  // Interceptor/Filter outcomes go under details.
  //
  // Should generally use google.rpc.Code, but we may choose to define our own
  // Code enum for CI/CD specific values (e.g. TRIGGER / NO_TRIGGER / ERROR)
  google.rpc.Status status = 2;

  // The raw incoming event received by the Trigger.
  Event input_event = 3;

  // Final resulting event after Trigger processing has been completed.
  Event final_event = 4;

  // Trigger identifier this event is associated with.
  // May be omitted for cases of manual calls.
  //
  // Example: namespaces/default/trigger/1234
  string trigger_name = 5;

  // Any additional info about the triggering event can be placed here.
  map<string, google.protobuf.Any> extensions = 6;
}

// Describes an arbitrary incoming event.
message Event {
  // Request metadata attached to the event.
  // For HTTP, this may be headers.
  // For gRPC, this may be context metadata (e.g.
  // https://pkg.go.dev/google.golang.org/grpc/metadata?tab=doc#MD)
  map<string, string> metadata = 1;

  // Raw content of the incoming event.
  // For HTTP this should be the incoming request body.
  // For gRPC this is the incoming request
  // (generally you should use google.protobuf.Any to encode type information).
  bytes content = 2;

  // Any additional details that should be included in the event.
	// Primarily included for parity with google/api/httpbody.proto
  map<string, google.protobuf.Any> extensions = 3;
}


/***********
 * RPC Messages
 ***********/


message CreateResultRequest {
  // User provided parent to partition results under.
  string parent = 1;

  Result result = 2 [(google.api.field_behavior) = REQUIRED];
}

message DeleteResultRequest {
  string name = 1;
}

message UpdateResultRequest {
  string name = 1;
  Result result = 2;

  google.protobuf.FieldMask update_mask = 3;
  // If set, then the request will succeed if and only if the provided etag
  // matches the server-computed value, else will fail.
  // Should be used to prevent concurrent updates from overwritting each other.
  string etag = 4;
}

message GetResultRequest {
  string name = 1;
}

message ListResultsRequest {
  string parent = 1;

  string filter = 2;

  int32 page_size = 3;
  string page_token = 4;
}

message ListResultsResponse {
  repeated Result results = 1;
  string next_page_token = 2;
}