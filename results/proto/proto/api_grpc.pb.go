// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ResultsClient is the client API for Results service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResultsClient interface {
	CreateTaskRunResult(ctx context.Context, in *CreateTaskRunRequest, opts ...grpc.CallOption) (*TaskRunResult, error)
	UpdateTaskRunResult(ctx context.Context, in *UpdateTaskRunRequest, opts ...grpc.CallOption) (*TaskRunResult, error)
	GetTaskRunResult(ctx context.Context, in *GetTaskRunRequest, opts ...grpc.CallOption) (*TaskRunResult, error)
	DeleteTaskRunResult(ctx context.Context, in *DeleteTaskRunRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListTaskRunsResult(ctx context.Context, in *ListTaskRunsRequest, opts ...grpc.CallOption) (*ListTaskRunsResponse, error)
}

type resultsClient struct {
	cc grpc.ClientConnInterface
}

func NewResultsClient(cc grpc.ClientConnInterface) ResultsClient {
	return &resultsClient{cc}
}

func (c *resultsClient) CreateTaskRunResult(ctx context.Context, in *CreateTaskRunRequest, opts ...grpc.CallOption) (*TaskRunResult, error) {
	out := new(TaskRunResult)
	err := c.cc.Invoke(ctx, "/tekton.Results/CreateTaskRunResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultsClient) UpdateTaskRunResult(ctx context.Context, in *UpdateTaskRunRequest, opts ...grpc.CallOption) (*TaskRunResult, error) {
	out := new(TaskRunResult)
	err := c.cc.Invoke(ctx, "/tekton.Results/UpdateTaskRunResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultsClient) GetTaskRunResult(ctx context.Context, in *GetTaskRunRequest, opts ...grpc.CallOption) (*TaskRunResult, error) {
	out := new(TaskRunResult)
	err := c.cc.Invoke(ctx, "/tekton.Results/GetTaskRunResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultsClient) DeleteTaskRunResult(ctx context.Context, in *DeleteTaskRunRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tekton.Results/DeleteTaskRunResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultsClient) ListTaskRunsResult(ctx context.Context, in *ListTaskRunsRequest, opts ...grpc.CallOption) (*ListTaskRunsResponse, error) {
	out := new(ListTaskRunsResponse)
	err := c.cc.Invoke(ctx, "/tekton.Results/ListTaskRunsResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResultsServer is the server API for Results service.
// All implementations must embed UnimplementedResultsServer
// for forward compatibility
type ResultsServer interface {
	CreateTaskRunResult(context.Context, *CreateTaskRunRequest) (*TaskRunResult, error)
	UpdateTaskRunResult(context.Context, *UpdateTaskRunRequest) (*TaskRunResult, error)
	GetTaskRunResult(context.Context, *GetTaskRunRequest) (*TaskRunResult, error)
	DeleteTaskRunResult(context.Context, *DeleteTaskRunRequest) (*empty.Empty, error)
	ListTaskRunsResult(context.Context, *ListTaskRunsRequest) (*ListTaskRunsResponse, error)
	mustEmbedUnimplementedResultsServer()
}

// UnimplementedResultsServer must be embedded to have forward compatible implementations.
type UnimplementedResultsServer struct {
}

func (*UnimplementedResultsServer) CreateTaskRunResult(context.Context, *CreateTaskRunRequest) (*TaskRunResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskRunResult not implemented")
}
func (*UnimplementedResultsServer) UpdateTaskRunResult(context.Context, *UpdateTaskRunRequest) (*TaskRunResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskRunResult not implemented")
}
func (*UnimplementedResultsServer) GetTaskRunResult(context.Context, *GetTaskRunRequest) (*TaskRunResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskRunResult not implemented")
}
func (*UnimplementedResultsServer) DeleteTaskRunResult(context.Context, *DeleteTaskRunRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskRunResult not implemented")
}
func (*UnimplementedResultsServer) ListTaskRunsResult(context.Context, *ListTaskRunsRequest) (*ListTaskRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskRunsResult not implemented")
}
func (*UnimplementedResultsServer) mustEmbedUnimplementedResultsServer() {}

func RegisterResultsServer(s *grpc.Server, srv ResultsServer) {
	s.RegisterService(&_Results_serviceDesc, srv)
}

func _Results_CreateTaskRunResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsServer).CreateTaskRunResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tekton.Results/CreateTaskRunResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsServer).CreateTaskRunResult(ctx, req.(*CreateTaskRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Results_UpdateTaskRunResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsServer).UpdateTaskRunResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tekton.Results/UpdateTaskRunResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsServer).UpdateTaskRunResult(ctx, req.(*UpdateTaskRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Results_GetTaskRunResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsServer).GetTaskRunResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tekton.Results/GetTaskRunResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsServer).GetTaskRunResult(ctx, req.(*GetTaskRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Results_DeleteTaskRunResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsServer).DeleteTaskRunResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tekton.Results/DeleteTaskRunResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsServer).DeleteTaskRunResult(ctx, req.(*DeleteTaskRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Results_ListTaskRunsResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultsServer).ListTaskRunsResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tekton.Results/ListTaskRunsResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultsServer).ListTaskRunsResult(ctx, req.(*ListTaskRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Results_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tekton.Results",
	HandlerType: (*ResultsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTaskRunResult",
			Handler:    _Results_CreateTaskRunResult_Handler,
		},
		{
			MethodName: "UpdateTaskRunResult",
			Handler:    _Results_UpdateTaskRunResult_Handler,
		},
		{
			MethodName: "GetTaskRunResult",
			Handler:    _Results_GetTaskRunResult_Handler,
		},
		{
			MethodName: "DeleteTaskRunResult",
			Handler:    _Results_DeleteTaskRunResult_Handler,
		},
		{
			MethodName: "ListTaskRunsResult",
			Handler:    _Results_ListTaskRunsResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
