apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: tekton-webhooks-extension
  name: tekton-webhooks-extension
  namespace: tekton-pipelines
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: tekton-webhooks-extension-minimal
  namespace: tekton-pipelines
rules:
- apiGroups:
  - security.openshift.io
  resources:
  - securitycontextconstraints
  verbs:
  - use
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  - services
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - ""
  resources:
  - pods/log
  - namespaces
  - events
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  - configmaps
  verbs:
  - get
  - list
  - create
  - delete
  - update
  - watch
- apiGroups:
  - extensions
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - tekton.dev
  resources:
  - tasks
  - clustertasks
  - taskruns
  - pipelines
  - pipelineruns
  - pipelineresources
  - eventlisteners
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - tekton.dev
  resources:
  - taskruns/finalizers
  - pipelineruns/finalizers
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - tekton.dev
  resources:
  - tasks/status
  - clustertasks/status
  - taskruns/status
  - pipelines/status
  - pipelineruns/status
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses
  - ingresses/status
  verbs:
  - delete
  - create
  - patch
  - get
  - list
  - update
  - watch
- apiGroups:
  - route.openshift.io
  resources:
  -  routes
  verbs:
  - get
  - list
  - create
  - delete
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tekton-webhooks-extension-minimal
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-webhooks-extension-minimal
subjects:
- kind: ServiceAccount
  name: tekton-webhooks-extension
  namespace: tekton-pipelines
---
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: tekton-webhooks-extension
  name: tekton-webhooks-extension-eventlistener
  namespace: tekton-pipelines
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tekton-triggers-minimal
rules:
- apiGroups:
  - tekton.dev
  resources:
  - tasks
  - taskruns
  - eventlisteners
  - triggerbindings
  - triggertemplates
  verbs:
  - get
- apiGroups:
  - tekton.dev
  resources:
  - pipelineruns
  - pipelineresources
  - taskruns
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tekton-webhooks-extension-eventlistener-minimal
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-triggers-minimal
subjects:
- kind: ServiceAccount
  name: tekton-webhooks-extension-eventlistener
  namespace: tekton-pipelines
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: webhooks-extension
  name: webhooks-extension
  namespace: tekton-pipelines
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webhooks-extension
  template:
    metadata:
      labels:
        app: webhooks-extension
    spec:
      containers:
      - env:
        - name: PORT
          value: "8080"
        - name: INSTALLED_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DOCKER_REGISTRY_LOCATION
          value: DOCKER_REPO
        - name: WEB_RESOURCES_DIR
          value: web
        # If this endpoint's protocol is https, ssl verification will be enabled on the github webhook
        # openshift_master_default_subdomain usually of the format 'apps.host.company.com'
        - name: WEBHOOK_CALLBACK_URL
          value: "http://el-tekton-webhooks-eventlistener-tekton-pipelines.{openshift_master_default_subdomain}"
        - name: SERVICE_ACCOUNT
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: PLATFORM
          value: "openshift"
        image: github.com/tektoncd/experimental/webhooks-extension/cmd/extension
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /liveness
            port: 8080
        name: webhooks-extension
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /readiness
            port: 8080
      serviceAccountName: tekton-webhooks-extension

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    tekton-dashboard-bundle-location: web/extension.1045ddf4.js
    tekton-dashboard-display-name: Webhooks
    tekton-dashboard-endpoints: webhooks.web
  labels:
    app: webhooks-extension
    tekton-dashboard-extension: "true"
  name: webhooks-extension
  namespace: tekton-pipelines
spec:
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    app: webhooks-extension
  type: NodePort

---
# Monitor the pipelinerun status and update the pull request
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: monitor-task
  namespace: tekton-pipelines
spec:
  inputs:
    resources:
      - name: pull-request
        type: pullRequest
    params:
      - name: commentsuccess
        description: The text of the success comment
        default: "Success"
        type: string
      - name: commentfailure
        description: The text of the failure comment
        default: "Failed"
        type: string
      - name: commenttimeout
        description: The text of the timeout comment
        default: "Unknown"
        type: string
      - name: dashboard-url
        description: The URL to the pipelineruns page of the dashboard
        default: "http://localhost:9097/"
        type: string
      # This can be deleted after pending status change issue is resolved, that being that AFAIK the pull request resource only modifies
      # status once everything is complete, so we can only modify status via the pull request resource once.  To get around this we hit
      # the github status URL to set the status into pending and use this secret to during that request.
      - name: secret
        description: The secret containing the access token to access github
        type: string
      # Up to here
  outputs:
    resources:
      - name: pull-request
        type: pullRequest
  steps:
  - name: check
    image: maiwj/kubernetes-python-client:latest
    env:
      - name: EVENTID
        valueFrom:
          fieldRef:
            fieldPath: metadata.labels['tekton.dev/triggers-eventid']
      - name: COMMENT_SUCCESS
        value: $(inputs.params.commentsuccess)
      - name: COMMENT_FAILURE
        value: $(inputs.params.commentfailure)
      - name: COMMENT_TIMEOUT
        value: $(inputs.params.commenttimeout)
      - name: URL
        value: $(inputs.params.dashboard-url)
      # This can be deleted after any fix to the above mentioned pending status change
      - name: GITHUBTOKEN
        valueFrom:
          secretKeyRef:
            key: accessToken
            name: $(inputs.params.secret)
      # Up to here
    command: ["/bin/bash"]
    args:
    - -ce
    - |
      set -e
      cat <<EOF | python
      import time, os, json, requests, pprint, shutil
      from kubernetes import client, config
      config.load_incluster_config()
      api_instance = client.CustomObjectsApi(client.ApiClient(client.Configuration()))
      gitPRcontext = "Tekton"
      gitPRurl = ""
      # This is the code thats puts the pullrequest into pending status, this is code to rip out later if there
      # is a fix to the above mentioned update status to pending issue.
      with open("/workspace/pull-request/github/pr.json") as fp:
        rawdata = json.load(fp)
        statusurl = rawdata['statuses_url']
      pendingData = {
        "state": "pending",
        "description": "pipelines in progress",
        "target_url": "",
        "context": "Tekton"
      }
      print("Setting status to pending with URL : " + statusurl)
      resp = requests.post(statusurl, json.dumps(pendingData), headers = {'Content-Type': 'application/json', 'Authorization': "Bearer $GITHUBTOKEN"})
      print(resp)
      # End of code to replace
      if not "$URL".startswith("http"):
        pipelineRunURLPrefix = "http://" + "$URL"
      else:
        pipelineRunURLPrefix = "$URL"
      labelToCheck = "tekton.dev/triggers-eventid=$EVENTID"
      runsPassed = []
      runsFailed = []
      runsIncomplete = []
      failed = 0
      i = range(180)
      for x in i:
          time.sleep( 10 )
          runsPassed = []
          runsFailed = []
          runsIncomplete = []
          failed = 0
          api_response = api_instance.list_cluster_custom_object("tekton.dev", "v1alpha1", "pipelineruns", label_selector=labelToCheck)
          if len(api_response["items"]) > 0:
            for entry in api_response["items"]:
              pr = entry["metadata"]["name"]
              namespace = entry["metadata"]["namespace"]
              pipeline = entry["spec"]["pipelineRef"]["name"]
              link = pipelineRunURLPrefix + "/#/namespaces/" + namespace + "/pipelines/" + pipeline + "/runs/" + pr
              print("Checking pipelinerun " + pr + " in namespace " + namespace)
              if entry["status"]["conditions"][0]["status"] == u'True' and entry["status"]["conditions"][0]["type"] == u'Succeeded':
                print("Success - pipelinerun " + pr + " in namespace " + namespace)
                runsPassed.append("[**$COMMENT_SUCCESS**](" + link + ") | " + pipeline + " | " +  pr + " | " + namespace)
                continue
              if entry["status"]["conditions"][0]["status"] == u'False' and entry["status"]["conditions"][0]["type"] == u'Succeeded':
                failed =+ 1
                print("Failed - pipelinerun " + pr + " in namespace " + namespace)
                runsFailed.append("[**$COMMENT_FAILURE**](" + link + ") | " + pipeline + " | " + pr + " | " + namespace)
                continue
              link = pipelineRunURLPrefix + "/#/namespaces/" + namespace + "/pipelines/" + pipeline + "/runs/" + pr
              runsIncomplete.append("[**$COMMENT_TIMEOUT**](" + link + ") | " + pipeline + " | " + pr + " | " + namespace)
            if len(runsIncomplete) == 0:
              break
          else:
            break
      gitPRdescription = "All pipelines succeeded!"
      gitPRcode = "success"
      if failed > 0:
        gitPRdescription = str(failed) + " pipeline(s) failed!"
        gitPRcode = "failure"
      if len(runsIncomplete) > 0:
        print("Some pipelineruns had not completed when the monitor reached its timeout")
        gitPRdescription = "timed out monitoring pipeline runs"
        gitPRcode = "error"
      results = runsPassed + runsFailed + runsIncomplete
      comment = ("## Tekton Status Report \n\n"
                 "Status | Pipeline | PipelineRun | Namespace\n"
                 ":----- | :------- | :--------------- | :--------\n"
                 ) + "\n".join(results)
      if not os.path.exists("/workspace/output/pull-request/comments"):
        os.makedirs("/workspace/output/pull-request/comments")
        if os.path.exists("/workspace/pull-request/comments/.MANIFEST"):
          shutil.copyfile("/workspace/pull-request/comments/.MANIFEST","/workspace/output/pull-request/comments/.MANIFEST")
      handle = open("/workspace/output/pull-request/comments/newcomment.json", 'w')
      handle.write(comment)
      handle.close()
      if not "$URL".startswith("http"):
        detailsURL = "http://" + "$URL" + "/#/pipelineruns"
      else:
        detailsURL = "$URL" + "/#/pipelineruns"
      print("Set details url to: " + detailsURL)
      status = json.dumps(dict(ID=gitPRcontext,Code=gitPRcode,Description=gitPRdescription,URL=detailsURL))
      if not os.path.exists("/workspace/output/pull-request/status"):
        os.makedirs("/workspace/output/pull-request/status")
      handle = open("/workspace/output/pull-request/status/Tekton.json", 'w')
      handle.write(status)
      handle.close()
      if not os.path.exists("/workspace/output/pull-request/"):
        os.makedirs("/workspace/output/pull-request/")
      if not os.path.exists("/workspace/output/pull-request/labels"):
        shutil.copytree("/workspace/pull-request/labels","/workspace/output/pull-request/labels")
      shutil.copyfile("/workspace/pull-request/base.json","/workspace/output/pull-request/base.json")
      shutil.copyfile("/workspace/pull-request/head.json","/workspace/output/pull-request/head.json")
      EOF
---

apiVersion: tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: monitor-task-binding
  namespace: tekton-pipelines
spec:
  params:
  - name: pullrequesturl
    value: $(body.pull_request.html_url)
---

apiVersion: tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: monitor-task-template
  namespace: tekton-pipelines
spec:
  params:
  - name: pullrequesturl
    description: The pull request url
    type: string
  - name: gitsecretname
    description: The git secret name
    default: github-secrets
    type: string
  - name: gitsecretkeyname
    description: The git secret key name
    default: token
    type: string
  - name: commentsuccess
    description: The text of the success comment
    default: "Success"
    type: string
  - name: commentfailure
    description: The text of the failure comment
    default: "Failed"
    type: string
  - name: commenttimeout
    description: The text of the timeout comment
    default: "Unknown"
    type: string
  - name: dashboardurl
    description: The URL to the pipelineruns page of the dashboard
    default: "http://localhost:9097/"
    type: string
  resourcetemplates:
  - apiVersion: tekton.dev/v1alpha1
    kind: PipelineResource
    metadata:
      name: pull-request-$(uid)
      namespace: tekton-pipelines
    spec:
      type: pullRequest
      params:
        - name: url
          value: $(params.pullrequesturl)
      secrets:
        - fieldName: githubToken
          secretName: $(params.gitsecretname)
          secretKey: $(params.gitsecretkeyname)
  - apiVersion: tekton.dev/v1alpha1
    kind: TaskRun
    metadata:
      generateName: monitor-taskrun-
      namespace: tekton-pipelines
    spec:
      serviceAccount: tekton-webhooks-extension
      taskRef:
        name: monitor-task
      inputs:
        params:
        - name: commentsuccess
          value: $(params.commentsuccess)
        - name: commentfailure
          value: $(params.commentfailure)
        - name: commenttimeout
          value: $(params.commenttimeout)
        - name: dashboard-url
          value: $(params.dashboardurl)
        - name: secret
          value: $(params.gitsecretname)
        resources:
        - name: pull-request
          resourceRef:
            name: pull-request-$(uid)
      outputs:
        resources:
        - name: pull-request
          resourceRef:
            name: pull-request-$(uid)
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: tekton-webhooks-extension-validator
  namespace: tekton-pipelines
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tekton-webhooks-extension-validator
  template:
    metadata:
      labels:
        app: tekton-webhooks-extension-validator
    spec:
      containers:
        - name: validate
          image: "github.com/tektoncd/experimental/webhooks-extension/cmd/interceptor"
          env:
            - name: INSTALLED_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      serviceAccountName: tekton-webhooks-extension
---

apiVersion: v1
kind: Service
metadata:
  name: tekton-webhooks-extension-validator
  namespace: tekton-pipelines
spec:
  type: ClusterIP
  selector:
    app: tekton-webhooks-extension-validator
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
