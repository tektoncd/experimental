# ------------------- Extension Service Account ----------------------- #
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: tekton-webhooks-extension
  name: tekton-webhooks-extension
  namespace: tekton-pipelines
---
# ------------------- Extension Role & Role Binding ------------------- #
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tekton-webhooks-extension-minimal
  namespace: tekton-pipelines
rules:
  - apiGroups: [""]
    resources: ["serviceaccounts"]
    verbs: ["get", "list", "patch", "update", "watch"]
  - apiGroups: [""]
    resources: ["pods", "services"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: [""]
    resources: ["pods/log", "namespaces", "events"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets", "configmaps"]
    verbs: ["get", "list", "create", "delete", "update", "watch"]
  - apiGroups: ["extensions", "apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: ["tekton.dev"]
    resources: ["tasks", "clustertasks", "taskruns", "pipelines", "pipelineruns", "pipelineresources"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: ["tekton.dev"]
    resources: ["taskruns/finalizers", "pipelineruns/finalizers"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: ["tekton.dev"]
    resources: ["tasks/status", "clustertasks/status", "taskruns/status", "pipelines/status", "pipelineruns/status"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
  - apiGroups: ["sources.eventing.knative.dev"]
    resources: ["githubsources"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tekton-webhooks-extension-minimal
subjects:
  - kind: ServiceAccount
    name: tekton-webhooks-extension
    namespace: tekton-pipelines
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-webhooks-extension-minimal
---
# ------------------- Extension Deployment ------------------- #
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhooks-extension
  namespace: tekton-pipelines
  labels:
    app: webhooks-extension
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webhooks-extension
  template:
    metadata:
      labels:
        app: webhooks-extension
    spec:
      containers:
        - name: webhooks-extension
          image: "gcr.io/tekton-nightly/extension:latest"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /liveness
              port: 8080
          readinessProbe:
            httpGet:
              path: /readiness
              port: 8080
          env:
          - name: PORT
            value: "8080"
          - name: INSTALLED_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: DOCKER_REGISTRY_LOCATION
            value: DOCKER_REPO
          - name: WEB_RESOURCES_DIR
            value: /var/run/ko
      serviceAccountName: tekton-webhooks-extension
---
# ------------------- Extension Service ------------------- #
apiVersion: v1
kind: Service
metadata:
  name: webhooks-extension
  namespace: tekton-pipelines
  labels:
    app: webhooks-extension
    tekton-dashboard-extension: "true"
  annotations:
    tekton-dashboard-display-name: Webhooks
    tekton-dashboard-endpoints: "webhooks.web"
    tekton-dashboard-bundle-location: "web/extension.73344527.js"
spec:
  type: NodePort
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: webhooks-extension
---
# ------------------- Sink Knative Service ------------------- #
apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: webhooks-extension-sink
  namespace: tekton-pipelines
  labels:
    app: webhooks-extension-sink
spec:
  template:
    spec:
      containers:
      - image: "gcr.io/tekton-nightly/sink:latest"
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /liveness
        readinessProbe:
          httpGet:
            path: /readiness
        env:
        - name: INSTALLED_NAMESPACE
          value: tekton-pipelines
      serviceAccountName: tekton-webhooks-extension
