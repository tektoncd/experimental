apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: validate-github-event
spec:
  inputs:
    params:
      - name: EventBody
        description: Payload of the event received
      - name: EventHeaders
        description: Headers of the event received
      - name: Github-Secret
        description: Secret name used to configure webhook
      - name: Github-Secret-Key
        description: Secret key used to configure the webhook
      - name: EventOrigin
        description: The event origin this Task is for (e.g. a repository URL - should be passed in by whoever creates the event listener)
        default: ""
        # clone_url without .git on the end matches current ConfigMap implementation, e.g.
        # https://github.ibm.com/owner/reponame
  steps:
    - name: validate
      image: python:alpine
      command: ["/bin/sh"]
      args:
      - -ce
      - |
        set -e

        cat <<EOF | python
        import hashlib, os, hmac, json, time

        secret = bytes(os.environ.get('GithubSecret'), 'utf-8')
        payload = bytes('$(inputs.params.EventBody)','utf-8')

        headers = json.loads(r'$(inputs.params.EventHeaders)')
        payloadAsJson = json.loads(r'$(inputs.params.EventBody)')

        eventOrigin = "$(inputs.params.EventOrigin)"
        signature = headers["X-Hub-Signature"][0]

        expected = hmac.new(secret, payload, hashlib.sha1).hexdigest()

        if expected is not None:
          if not isinstance(expected, str):
            expected = str(expected)

          sig_parts = signature.split("=", 1)

          if not isinstance(sig_parts[1], str):
            sig_parts1 = str(sig_parts[1])
          else:
            sig_parts1 = sig_parts[1]

          if len(sig_parts) > 1 and sig_parts[0] == "sha1" and hmac.compare_digest(sig_parts1, expected):
            print('X-Signature is good')
          else:
            print('Incoming X-Signature does not match what was expected (check you are using a secret token as an EventListener parameter)')
            exit(1)
          if (len(eventOrigin) < 1): # Didn't pass in an event origin
            print('X-Signature is good, no EventOrigin validation to do. Validate task PASSED')
            exit(0)
          else:
            foundRepositoryURL = payloadAsJson["repository"]["html_url"]
            if (len(foundRepositoryURL) > 1):
              print('A clone URL has been detected')
              if foundRepositoryURL == eventOrigin:
                print('All is well, the repository URL matches and so does the signature. Validate task PASSED')
                exit(0)
              else:
                print('Wanted origin is')
                print(eventOrigin)
                print('Found clone URL does not match the wanted origin')
        print('Validate task FAILED')
        exit(1)
        EOF
      env:
        - name: GithubSecret
          valueFrom:
            secretKeyRef:
              name: $(inputs.params.Github-Secret)
              key: $(inputs.params.Github-Secret-Key)