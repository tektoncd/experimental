apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: webhook-task
  namespace: tekton-pipelines
spec:
  inputs:
    params:
    - name: Mode
      description: Whether or not to create or delete the webhook
      default: "create"
    - name: ExternalUrl
      description: Use the Ingress external URL that's infront of the EventListener
      default: "replacemeip.nip.io"
    - name: GitHubOwner
      description: The GitHub owner name (used for creating and deleting the webhook)
      default: "owner"
    - name: GitHubRepo
      description: The GitHub repository name (used for creating and deleting the webhook)
      default: "repository"
    - name: GitHubSecretName
      description: The secret name for GitHub (used for creating and deleting the webhook)
      default: "githubsecret"
    - name: GitHubAccessTokenKey
      description: The key name in the secret for the access token (used for creating and deleting the webhook)
      default: "accessToken"
    - name: GitHubUserNameKey
      description: The key name in the secret for the user name (used for creating and deleting the webhook)
      type: string
    - name: GitHubSecretStringKey
      description: The key name for the GitHub secret string (used for creating and deleting the webhook)
      default: "secretToken"
    - name: GitHubUrl
      description: The URL of the GitHub server (used for creating and deleting the webhook)
      default: "github.com"
    - name: WebhookName
      description: The webhook name to delete (as available at (your repository/hooks/<number here>)
      default: "1234567"
  steps:  
  - name: create-or-delete-webhook
    image: curlimages/curl:latest
    command:
    - sh
    args:
    - -ce
    - |
      set -e
      if [ $(inputs.params.Mode) = "create" ] ; then
        if [ $(inputs.params.GitHubUrl) = "github.com" ] ; then
          echo "Assuming GitHub.com and not GitHub Enterprise"
          if [ -z $(inputs.params.GitHubUserNameKey) ] ; then
            echo "No GitHub username key found so assuming this is an access token"
            curl -d "{\"name\": \"web\",\"active\": true,\"events\": [\"push\",\"pull_request\"],\"config\": {\"url\": \"https://$(inputs.params.ExternalUrl)/\",\"content_type\": \"json\",\"insecure_ssl\": \"1\" ,\"secret\": \"$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))\"}}" -X POST -u token:$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey)) -L https://api.github.com/repos/$(inputs.params.GitHubOwner)/$(inputs.params.GitHubRepo)/hooks
          else          
            echo "GitHub username key found so assuming this is a username and password"
            curl -d "{\"name\": \"web\",\"active\": true,\"events\": [\"push\",\"pull_request\"],\"config\": {\"url\": \"https://$(inputs.params.ExternalUrl)/\",\"content_type\": \"json\",\"insecure_ssl\": \"1\" ,\"secret\": \"$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))\"}}" -X POST -u $(cat /var/secret/$(inputs.params.GitHubUserNameKey)):$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey)) -L https://api.github.com/repos/$(inputs.params.GitHubOwner)/$(inputs.params.GitHubRepo)/hooks
          fi
        else
          echo "Assuming GitHub Enterprise"
          if [ -z $(inputs.params.GitHubUserNameKey) ] ; then
            echo "No GitHub Enterprise username key found so assuming this is an access token"
            curl -d "{\"name\": \"web\",\"active\": true,\"events\": [\"push\",\"pull_request\"],\"config\": {\"url\": \"https://$(inputs.params.ExternalUrl)/\",\"content_type\": \"json\",\"insecure_ssl\": \"1\" ,\"secret\": \"$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))\"}}" -X POST -u token:$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey)) -L https://$(inputs.params.GitHubUrl)/api/v3/repos/$(inputs.params.GitHubOwner)/$(inputs.params.GitHubRepo)/hooks        
          else 
            echo "GitHub Enterprise username key found $(inputs.params.GitHubUserNameKey) so assuming this is a username and password"
            curl -d "{\"name\": \"web\",\"active\": true,\"events\": [\"push\",\"pull_request\"],\"config\": {\"url\": \"https://$(inputs.params.ExternalUrl)/\",\"content_type\": \"json\",\"insecure_ssl\": \"1\" ,\"secret\": \"$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))\"}}" -X POST -u $(cat /var/secret/$(inputs.params.GitHubUserNameKey)):$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey)) -L https://$(inputs.params.GitHubUrl)/api/v3/repos/$(inputs.params.GitHubOwner)/$(inputs.params.GitHubRepo)/hooks
          fi
        fi
      fi
      
      if [ $(inputs.params.Mode) = "delete" ] ; then
        if [ $(inputs.params.GitHubUrl) = "github.com" ] ; then
          if [ -z $(inputs.params.GitHubUserNameKey) ] ; then
            echo "No GitHub username key found so assuming this is an access token"
            curl -d "{\"name\": \"web\",\"active\": true,\"events\": [\"push\",\"pull_request\"],\"config\": {\"url\": \"https://$(inputs.params.ExternalUrl)/\",\"content_type\": \"json\",\"insecure_ssl\": \"1\" ,\"secret\": \"$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))\"}}" -X DELETE -u token:$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey)) -L https://api.github.com/repos/$(inputs.params.GitHubOwner)/$(inputs.params.GitHubRepo)/hooks/$(inputs.params.WebhookName)
          else
            curl -d "{\"name\": \"web\",\"active\": true,\"events\": [\"push\",\"pull_request\"],\"config\": {\"url\": \"https://$(inputs.params.ExternalUrl)/\",\"content_type\": \"json\",\"insecure_ssl\": \"1\" ,\"secret\": \"$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))\"}}" -X POST -u $(cat /var/secret/$(inputs.params.GitHubUserNameKey)):$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey)) -L https://api.github.com/repos/$(inputs.params.GitHubOwner)/$(inputs.params.GitHubRepo)/hooks/$(inputs.params.WebhookName)
            curl -d "{\"name\": \"web\",\"active\": true,\"events\": [\"push\",\"pull_request\"],\"config\": {\"url\": \"https://$(inputs.params.ExternalUrl)/\",\"content_type\": \"json\",\"insecure_ssl\": \"1\" ,\"secret\": \"$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))\"}}" -X DELETE -u $(cat /var/secret/$(inputs.params.GitHubUserNameKey)):$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey)) -L https://api.github.com/repos/$(inputs.params.GitHubOwner)/$(inputs.params.GitHubRepo)/hooks/$(inputs.params.WebhookName)
          fi
        elif [ -z $(inputs.params.GitHubUserNameKey) ] ; then
          echo "No GitHub Enterprise username key found so assuming this is an access token"
          curl -d "{\"name\": \"web\",\"active\": true,\"events\": [\"push\",\"pull_request\"],\"config\": {\"url\": \"https://$(inputs.params.ExternalUrl)/\",\"content_type\": \"json\",\"insecure_ssl\": \"1\" ,\"secret\": \"$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))\"}}" -X DELETE -u token:$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey)) -L https://$(inputs.params.GitHubUrl)/api/v3/repos/$(inputs.params.GitHubOwner)/$(inputs.params.GitHubRepo)/hooks/$(inputs.params.WebhookName)
        else
          echo "GitHub Enterprise username key found $(inputs.params.GitHubUserNameKey) so assuming this is a username and password"
          curl -d "{\"name\": \"web\",\"active\": true,\"events\": [\"push\",\"pull_request\"],\"config\": {\"url\": \"https://$(inputs.params.ExternalUrl)/\",\"content_type\": \"json\",\"insecure_ssl\": \"1\" ,\"secret\": \"$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))\"}}" -X DELETE -u $(cat /var/secret/$(inputs.params.GitHubUserNameKey)):$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey)) -L https://$(inputs.params.GitHubUrl)/api/v3/repos/$(inputs.params.GitHubOwner)/$(inputs.params.GitHubRepo)/hooks/$(inputs.params.WebhookName)
        fi
      fi
    volumeMounts:
    - name: github-secret
      mountPath: /var/secret
  volumes:
    - name: github-secret
      secret:
        secretName: $(inputs.params.GitHubSecretName)