# Monitor the pipelinerun status and update the pull request
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: monitor-task
  namespace: tekton-pipelines
spec:
  inputs:
    resources:
      - name: pull-request
        type: pullRequest
    params:
      - name: commentsuccess
        description: The text of the success comment
        default: "Success"
        type: string
      - name: commentfailure
        description: The text of the failure comment
        default: "Failed"
        type: string
      - name: commenttimeout
        description: The text of the timeout comment
        default: "Unknown"
        type: string
      - name: dashboard-url
        description: The URL to the pipelineruns page of the dashboard
        default: "http://localhost:9097/"
        type: string
      # This can be deleted after pending status change issue is resolved, that being that AFAIK the pull request resource only modifies
      # status once everything is complete, so we can only modify status via the pull request resource once.  To get around this we hit
      # the github status URL to set the status into pending and use this secret to during that request.  
      - name: secret
        description: The secret containing the access token to access github
        type: string
      # Up to here
  outputs:
    resources:
      - name: pull-request
        type: pullRequest
  steps:
  - name: check
    image: maiwj/kubernetes-python-client:latest
    env:
      - name: EVENTID
        valueFrom:
          fieldRef:
            fieldPath: metadata.labels['tekton.dev/triggers-eventid']
      - name: COMMENT_SUCCESS
        value: $(inputs.params.commentsuccess)
      - name: COMMENT_FAILURE
        value: $(inputs.params.commentfailure)
      - name: COMMENT_TIMEOUT
        value: $(inputs.params.commenttimeout)
      - name: URL
        value: $(inputs.params.dashboard-url)
      # This can be deleted after any fix to the above mentioned pending status change
      - name: GITHUBTOKEN
        valueFrom:
          secretKeyRef:
            key: accessToken
            name: $(inputs.params.secret)
      # Up to here
    command: ["/bin/bash"]
    args:
    - -ce
    - |
      set -e
      cat <<EOF | python
      import time, os, json, requests, pprint, shutil
      from kubernetes import client, config
      config.load_incluster_config()
      api_instance = client.CustomObjectsApi(client.ApiClient(client.Configuration()))
      gitPRcontext = "Tekton"
      gitPRurl = ""
      # This is the code thats puts the pullrequest into pending status, this is code to rip out later if there
      # is a fix to the above mentioned update status to pending issue.
      with open("/workspace/pull-request/github/pr.json") as fp:
        rawdata = json.load(fp)
        statusurl = rawdata['statuses_url']
      pendingData = {
        "state": "pending",
        "description": "pipelines in progress",
        "target_url": "",
        "context": "Tekton"
      }
      print("Setting status to pending with URL : " + statusurl)
      resp = requests.post(statusurl, json.dumps(pendingData), headers = {'Content-Type': 'application/json', 'Authorization': "Bearer $GITHUBTOKEN"})
      print(resp)
      # End of code to replace
      if not "$URL".startswith("http"):
        pipelineRunURLPrefix = "http://" + "$URL"
      else:
        pipelineRunURLPrefix = "$URL"
      labelToCheck = "tekton.dev/triggers-eventid=$EVENTID"
      runsPassed = []
      runsFailed = []
      runsIncomplete = []
      failed = 0
      i = range(180)
      for x in i:
          time.sleep( 10 )
          runsPassed = []
          runsFailed = []
          runsIncomplete = []
          failed = 0
          api_response = api_instance.list_cluster_custom_object("tekton.dev", "v1alpha1", "pipelineruns", label_selector=labelToCheck)
          if len(api_response["items"]) > 0:
            for entry in api_response["items"]:
              pr = entry["metadata"]["name"]
              namespace = entry["metadata"]["namespace"]
              pipeline = entry["spec"]["pipelineRef"]["name"]
              link = pipelineRunURLPrefix + "/#/namespaces/" + namespace + "/pipelineruns/" + pr
              print("Checking pipelinerun " + pr + " in namespace " + namespace)
              if entry["status"]["conditions"][0]["status"] == u'True' and entry["status"]["conditions"][0]["type"] == u'Succeeded':
                print("Success - pipelinerun " + pr + " in namespace " + namespace)
                runsPassed.append("[**$COMMENT_SUCCESS**](" + link + ") | " + pipeline + " | " +  pr + " | " + namespace)
                continue
              if entry["status"]["conditions"][0]["status"] == u'False' and entry["status"]["conditions"][0]["type"] == u'Succeeded':
                failed =+ 1
                print("Failed - pipelinerun " + pr + " in namespace " + namespace)
                runsFailed.append("[**$COMMENT_FAILURE**](" + link + ") | " + pipeline + " | " + pr + " | " + namespace)
                continue
              link = pipelineRunURLPrefix + "/#/namespaces/" + namespace + "/pipelineruns/" + pr
              runsIncomplete.append("[**$COMMENT_TIMEOUT**](" + link + ") | " + pipeline + " | " + pr + " | " + namespace)
            if len(runsIncomplete) == 0:
              break
          else:
            break
      gitPRdescription = "All pipelines succeeded!"
      gitPRcode = "success"
      if failed > 0:
        gitPRdescription = str(failed) + " pipeline(s) failed!"
        gitPRcode = "failure"
      if len(runsIncomplete) > 0:
        print("Some pipelineruns had not completed when the monitor reached its timeout")
        gitPRdescription = "timed out monitoring pipeline runs"
        gitPRcode = "error"
      results = runsPassed + runsFailed + runsIncomplete
      comment = ("## Tekton Status Report \n\n"
                 "Status | Pipeline | PipelineRun | Namespace\n"
                 ":----- | :------- | :--------------- | :--------\n"
                 ) + "\n".join(results)
      # Preserve existing comments
      shutil.copytree("/workspace/pull-request/comments","/workspace/output/pull-request/comments")
      handle = open("/workspace/output/pull-request/comments/newcomment.json", 'w')
      handle.write(comment)
      handle.close()
      if not "$URL".startswith("http"):
        detailsURL = "http://" + "$URL" + "/#/pipelineruns"
      else:
        detailsURL = "$URL" + "/#/pipelineruns"
      print("Set details url to: " + detailsURL)
      status = json.dumps(dict(ID=gitPRcontext,Code=gitPRcode,Description=gitPRdescription,URL=detailsURL))
      if not os.path.exists("/workspace/output/pull-request/status"):
        os.makedirs("/workspace/output/pull-request/status")
      handle = open("/workspace/output/pull-request/status/Tekton.json", 'w')
      handle.write(status)
      handle.close()
      if not os.path.exists("/workspace/output/pull-request/"):
        os.makedirs("/workspace/output/pull-request/")
      if not os.path.exists("/workspace/output/pull-request/labels"):
        shutil.copytree("/workspace/pull-request/labels","/workspace/output/pull-request/labels")
      shutil.copyfile("/workspace/pull-request/base.json","/workspace/output/pull-request/base.json") 
      shutil.copyfile("/workspace/pull-request/head.json","/workspace/output/pull-request/head.json") 
      EOF
