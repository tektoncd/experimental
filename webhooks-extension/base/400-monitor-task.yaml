# Monitor the pipelinerun status and update the pull request
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: monitor-task
  namespace: tekton-pipelines
spec:
  inputs:
    resources:
      - name: pull-request
        type: pullRequest
    params:
      - name: statusesurl
        description: The statuses url
        type: string
      - name: commentsuccess
        description: The text to use in the situation where a PipelineRun has succeeded.
        default: "Success"
        type: string
      - name: commentfailure
        description: The text to use in the situation where a PipelineRun has failed.
        default: "Failed"
        type: string
      - name: commenttimeout
        description: The text to use in the situation where a PipelineRun has timed out.
        default: "Unknown"
        type: string
      - name: commentmissing
        description: The text to use in the situation where a PipelineRun cannot be found.
        default: "Missing"
        type: string
      - name: dashboard-url
        description: The URL to the pipelineruns page of the dashboard
        default: "http://localhost:9097/"
        type: string
      - name: provider
        description: The git provider, "github" or "gitlab"
        default: "github"
        type: string
      - name: apiurl
        description: The git api URL for the repository
        type: string
      - name: insecure-skip-tls-verify
        description: Whether or not to verify SSL Certificates from the git server ("true" or "false")
        default: "false"
        type: string
      # This can be deleted after pending status change issue is resolved, that being that AFAIK the pull request resource only modifies
      # status once everything is complete, so we can only modify status via the pull request resource once.  To get around this we hit
      # the git status URL to set the status into pending and use this secret to during that request.  
      - name: secret
        description: The secret containing the access token to access the git server
        type: string
      # Up to here
  outputs:
    resources:
      - name: pull-request
        type: pullRequest
  steps:
  - name: check
    image: maiwj/kubernetes-python-client:latest
    env:
      - name: EVENTID
        valueFrom:
          fieldRef:
            fieldPath: metadata.labels['tekton.dev/triggers-eventid']
      - name: COMMENT_SUCCESS
        value: $(inputs.params.commentsuccess)
      - name: COMMENT_FAILURE
        value: $(inputs.params.commentfailure)
      - name: COMMENT_TIMEOUT
        value: $(inputs.params.commenttimeout)
      - name: COMMENT_MISSING
        value: $(inputs.params.commentmissing)
      - name: URL
        value: $(inputs.params.dashboard-url)
      - name: STATUSES_URL
        value: $(inputs.params.statusesurl)
      - name: GITPROVIDER
        value: $(inputs.params.provider)
      - name: GITAPIURL
        value: $(inputs.params.apiurl)
      - name: SKIPSSLVERIFY
        value: $(inputs.params.insecure-skip-tls-verify)
      # This can be deleted after any fix to the above mentioned pending status change
      - name: GITTOKEN
        valueFrom:
          secretKeyRef:
            key: accessToken
            name: $(inputs.params.secret)
      # Up to here
    command: ["/bin/bash"]
    args:
    - -ce
    - |
      set -e
      cat <<EOF | python
      import time, os, json, requests, pprint, shutil, distutils.util
      from kubernetes import client, config
      def diff(li1, li2): 
        li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2] 
        return li_dif
      config.load_incluster_config()
      api_instance = client.CustomObjectsApi(client.ApiClient(client.Configuration()))
      gitPRcontext = "Tekton"
      gitPRurl = ""  
      if not "$URL".startswith("http"):
        pipelineRunURLPrefix = "http://" + "$URL"
      else:
        pipelineRunURLPrefix = "$URL"    
      verifySSL = not bool(distutils.util.strtobool("$SKIPSSLVERIFY"))
      if "$GITPROVIDER" == "github":
        statusurl = "$STATUSES_URL"
        pendingData = {
          "state": "pending",
          "description": "pipelines in progress",
          "target_url": pipelineRunURLPrefix + "/#/pipelineruns",
          "context": "Tekton"
        }
        resp = requests.post(statusurl, json.dumps(pendingData), headers = {'Content-Type': 'application/json', 'Authorization': "Token $GITTOKEN"}, verify=verifySSL)
        print(resp)
      if "$GITPROVIDER" == "gitlab":
        statusurl = "$GITAPIURL" + "/" + "$STATUSES_URL" + "?state=pending&name=Tekton&target_url=" + pipelineRunURLPrefix + "/#/pipelineruns"
        resp = requests.post(statusurl, headers = {'Authorization': "Bearer $GITTOKEN"}, verify=verifySSL)
        print(resp)
      labelToCheck = "tekton.dev/triggers-eventid=$EVENTID"
      runsPassed = []
      runsFailed = []
      runsIncomplete = []
      runsMissing = []
      failed = 0
      i = range(180)
      initial_runs = api_instance.list_cluster_custom_object("tekton.dev", "v1alpha1", "pipelineruns", label_selector=labelToCheck)["items"]
      for x in i:
          time.sleep( 10 )
          runsPassed = []
          runsFailed = []
          runsIncomplete = []
          # To test this we need a webhook that will kick off two Pipelines
          # We will then delete one PipelineRun and observe it is correctly picked up as missing
          # This is easiest done by reopening an existing PullRequest
          # It's important to delete the PipelineRun only after the monitor task is already running because 
          # the first thing it's going to do is figure out the PipelineRuns to watch over
          failed = 0
          found_runs = api_instance.list_cluster_custom_object("tekton.dev", "v1alpha1", "pipelineruns", label_selector=labelToCheck)["items"]
          
          missingRuns = diff(initial_runs, found_runs)
          if len(missingRuns) > 0:
            for missingRun in missingRuns:
              pr = missingRun["metadata"]["name"]
              namespace = missingRun["metadata"]["namespace"]
              pipeline = missingRun["spec"]["pipelineRef"]["name"]
              link = pipelineRunURLPrefix + "/#/namespaces/" + namespace + "/pipelineruns/"
              data = "[**$COMMENT_MISSING**](" + link + ") | " + pipeline + " | " + pr + " | " + namespace
              if data not in runsMissing:
                # Don't add duplicates. Fear not, once this run is found it'll be removed
                runsMissing.append(data)
          if len(found_runs) > 0:
            for entry in found_runs:
              pr = entry["metadata"]["name"]
              namespace = entry["metadata"]["namespace"]
              pipeline = entry["spec"]["pipelineRef"]["name"]
              link = pipelineRunURLPrefix + "/#/namespaces/" + namespace + "/pipelineruns/" + pr
              missingLink = pipelineRunURLPrefix + "/#/namespaces/" + namespace + "/pipelineruns/"
              missingDataEntry = "[**$COMMENT_MISSING**](" + missingLink + ") | " + pipeline + " | " + pr + " | " + namespace
              if missingDataEntry in runsMissing:
                runsMissing.remove(data)
              print("Checking pipelinerun " + pr + " in namespace " + namespace)
              if entry["status"]["conditions"][0]["status"] == u'True' and entry["status"]["conditions"][0]["type"] == u'Succeeded':
                print("Success - pipelinerun " + pr + " in namespace " + namespace)
                runsPassed.append("[**$COMMENT_SUCCESS**](" + link + ") | " + pipeline + " | " +  pr + " | " + namespace)
                continue
              if entry["status"]["conditions"][0]["status"] == u'False' and entry["status"]["conditions"][0]["type"] == u'Succeeded':
                failed =+ 1
                print("Failed - pipelinerun " + pr + " in namespace " + namespace)
                runsFailed.append("[**$COMMENT_FAILURE**](" + link + ") | " + pipeline + " | " + pr + " | " + namespace)
                continue
              link = pipelineRunURLPrefix + "/#/namespaces/" + namespace + "/pipelineruns/" + pr
              runsIncomplete.append("[**$COMMENT_TIMEOUT**](" + link + ") | " + pipeline + " | " + pr + " | " + namespace)
            if len(runsIncomplete) == 0:
              break
          else:
            break
      gitPRdescription = "All pipelines succeeded!"
      gitPRcode = "success"
      if failed > 0:
        gitPRdescription = str(failed) + " pipeline(s) failed!"
        gitPRcode = "failure"
      if len(runsMissing) > 0:
        gitPRdescription = "Pipeline(s) missing!"
        gitPRcode = "failure"
      if len(runsIncomplete) > 0:
        print("Some PipelineRuns had not completed when the monitor reached its timeout")
        gitPRdescription = "timed out monitoring pipeline runs"
        gitPRcode = "error"

      results = runsPassed + runsFailed + runsIncomplete + runsMissing

      if (results == []):
        gitPRdescription = "No PipelineRuns were ever found for my PullRequest!"
        gitPRcode = "error"
        data = "**$COMMENT_MISSING** | N/A | No PipelineRuns were ever detected, failing the build | N/A"
        runsMissing.append(data)
        results = runsMissing

      comment = ("## Tekton Status Report \n\n"
                 "Status | Pipeline | PipelineRun | Namespace\n"
                 ":----- | :------- | :--------------- | :--------\n"
                 ) + "\n".join(results)

      shutil.copyfile("/workspace/pull-request/pr.json","/workspace/output/pull-request/pr.json")
      # Preserve existing comments
      shutil.copytree("/workspace/pull-request/comments","/workspace/output/pull-request/comments")
      handle = open("/workspace/output/pull-request/comments/newcomment.json", 'w')
      handle.write(comment)
      handle.close()
      if not "$URL".startswith("http"):
        detailsURL = "http://" + "$URL" + "/#/pipelineruns"
      else:
        detailsURL = "$URL" + "/#/pipelineruns"
      print("Set details url to " + detailsURL)
      status = json.dumps(dict(Label=gitPRcontext,state=gitPRcode,Desc=gitPRdescription,Target=detailsURL))
      print("Setting status to " + status)
      if not os.path.exists("/workspace/output/pull-request/status"):
        os.makedirs("/workspace/output/pull-request/status")
      handle = open("/workspace/output/pull-request/status/Tekton.json", 'w')
      handle.write(status)
      handle.close()
      if not os.path.exists("/workspace/output/pull-request/labels"):
        shutil.copytree("/workspace/pull-request/labels","/workspace/output/pull-request/labels")
      shutil.copyfile("/workspace/pull-request/base.json","/workspace/output/pull-request/base.json") 
      shutil.copyfile("/workspace/pull-request/head.json","/workspace/output/pull-request/head.json")
      EOF