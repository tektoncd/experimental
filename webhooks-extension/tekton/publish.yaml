apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: publish-tekton-webhooks-extension
spec:
  params:
    - name: versionTag
      description: The vX.Y.Z version that the artifacts should be tagged with (including `v`)
    - name: imageRegistry
      description: TODO(#569) This is a hack to make it easy for folks to switch the registry being used by the many many image outputs
    - name: pathToProject
      description: The path to the folder in the go/src dir that contains the project, which is used by `ko` to name the resulting images
  resources:
    inputs:
      - name: source
        type: git
        targetPath: go/src/github.com/tektoncd/experimental
      - name: bucket
        type: storage
    outputs:
    - name: bucket
      type: storage
    - name: builtWebhooksExtensionExtensionImage
      type: image
    - name: builtWebhooksExtensionInterceptorImage
      type: image
  steps:
  - name: link-input-bucket-to-output
    image: busybox
    command: ["cp"]
    args:
    - -r
    - "/workspace/bucket"
    - "/workspace/output/"
  - name: ensure-release-dirs-exist
    image: busybox
    command: ["mkdir"]
    args:
    - "-p"
    - "/workspace/output/bucket/latest/"
    - "/workspace/output/bucket/previous/"
  - name: webhooks-extension-run-ko
    # TODO(#639) we should be able to use the image built by an upstream Task here instead of hardcoding
    image: gcr.io/tekton-releases/dogfooding/ko:gcloud-latest
    imagePullPolicy: Always
    env:
    - name: KO_DOCKER_REPO
      value: $(params.imageRegistry)
    - name: GOPATH
      value: /workspace/go
    - name: CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE
      value: /secret/release.json
    - name: GO111MODULE
      value: 
    command:
    - /bin/sh
    args:
    - -ce
    - |
      set -e
      set -x

      # Auth with CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE
      gcloud auth configure-docker

      # ko requires this variable to be set in order to set image creation timestamps correctly https://github.com/google/go-containerregistry/pull/146
      export SOURCE_DATE_EPOCH=`date +%s`

      # Change to directory with our .ko.yaml
      cd /workspace/go/src/github.com/tektoncd/experimental/webhooks-extension

      # Publish images and create release.yaml
      mkdir -p /workspace/output/bucket/latest
      rm -f /workspace/output/bucket/latest/*.yaml
      kustomize build overlays/development | ko resolve --preserve-import-paths -f - > /workspace/output/bucket/latest/tekton-webhooks-extension-release.yaml
      kustomize build overlays/openshift-development | ko resolve --preserve-import-paths -f - > /workspace/output/bucket/latest/openshift-tekton-webhooks-extension-release.yaml

    volumeMounts:
      - name: gcp-secret
        mountPath: /secret

  - name: pin-docker-image-refs
    image: python
    workingDir: "/workspace/output/bucket"
    command:
    - /bin/sh
    args:
    - -ce
    - |
      curl https://raw.githubusercontent.com/tektoncd/dashboard/master/tekton/scripts/lockdown.py --output lockdown.py
      chmod +x lockdown.py
      pip install docker
      ./lockdown.py --omit webhooks-extension --path latest/tekton-webhooks-extension-release.yaml
      ./lockdown.py --omit webhooks-extension --path latest/openshift-tekton-webhooks-extension-release.yaml
    volumeMounts:
    - name: docker-socket
      mountPath: /var/run/docker.sock

  - name: copy-latest-to-previous-bucket
    image: busybox
    workingDir: "/workspace/bucket"
    command:
    - /bin/sh
    args:
    - -ce
    - |
      mkdir -p /workspace/output/bucket/previous/$(params.versionTag)/
      cp /workspace/output/bucket/latest/* /workspace/output/bucket/previous/$(params.versionTag)/

  - name: tag-images
    image: google/cloud-sdk
    command:
    - /bin/bash
    args:
    - -ce
    - |
      set -e
      set -x

      curl https://raw.githubusercontent.com/tektoncd/pipeline/master/tekton/koparse/koparse.py --output /usr/bin/koparse.py
      chmod +x /usr/bin/koparse.py

      REGIONS=(us eu asia)
      IMAGES=(
        $(params.imageRegistry)/$(params.pathToProject)/$(resources.outputs.builtWebhooksExtensionExtensionImage.url)
        $(params.imageRegistry)/$(params.pathToProject)/$(resources.outputs.builtWebhooksExtensionInterceptorImage.url)
      )
      # Parse the built images from the release.yaml generated by ko
      BUILT_IMAGES=( $(/usr/bin/koparse.py --path /workspace/output/bucket/latest/tekton-webhooks-extension-release.yaml --base $(params.imageRegistry)/$(params.pathToProject) --images ${IMAGES[@]}) )

      # Auth with account credentials
      gcloud auth activate-service-account --key-file=/secret/release.json

      # Tag the images and put them in all the regions
      for IMAGE in "${BUILT_IMAGES[@]}"
      do
        IMAGE_WITHOUT_SHA=${IMAGE%%@*}
        gcloud -q container images add-tag ${IMAGE} ${IMAGE_WITHOUT_SHA}:latest
        gcloud -q container images add-tag ${IMAGE} ${IMAGE_WITHOUT_SHA}:$(params.versionTag)
        for REGION in "${REGIONS[@]}"
        do
          for TAG in "latest" $(params.versionTag)
          do
            gcloud -q container images add-tag ${IMAGE} ${REGION}.${IMAGE_WITHOUT_SHA}:$TAG
          done
        done
      done
    volumeMounts:
      - name: gcp-secret
        mountPath: /secret

  volumes:
    - name: gcp-secret
      secret:
        secretName: release-secret
    - name: docker-socket
      hostPath:
        path: /var/run/docker.sock
        type: Socket
