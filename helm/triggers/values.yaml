# Copyright 2020 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# version -- Tekton triggers version used to add labels on deployments, pods and services
version: v0.4.0

# nameOverride -- Partially override resource generated names
nameOverride: ""

# fullnameOverride -- Fully override resource generated names
fullnameOverride: ""

rbac:
  # rbac.create -- Create RBAC resources
  create: true

  # rbac.serviceAccountName -- Name of the service account to use when rbac.create is false
  serviceAccountName:

customResourceDefinitions:
  # customResourceDefinitions.create -- Create CRDs
  create: true

podSecurityPolicy:
  # podSecurityPolicy.enabled -- Enable pod security policy
  enabled: false

config:
  # config.logging -- Configuration for logging (see https://github.com/tektoncd/pipeline/blob/master/docs/install.md)
  # @default -- See [values.yaml](./values.yaml)
  logging:
    # Common configuration for all knative codebase
    zap-logger-config: |
      {
        "level": "info",
        "development": false,
        "sampling": {
          "initial": 100,
          "thereafter": 100
        },
        "outputPaths": ["stdout"],
        "errorOutputPaths": ["stderr"],
        "encoding": "json",
        "encoderConfig": {
          "timeKey": "",
          "levelKey": "level",
          "nameKey": "logger",
          "callerKey": "caller",
          "messageKey": "msg",
          "stacktraceKey": "stacktrace",
          "lineEnding": "",
          "levelEncoder": "",
          "timeEncoder": "",
          "durationEncoder": "",
          "callerEncoder": ""
        }
      }
    # Log level overrides
    loglevel.controller: "info"
    loglevel.webhook: "info"
    loglevel.eventlistener: "info"

  # config.observability -- Configuration for observability (see https://github.com/tektoncd/pipeline/blob/master/docs/install.md)
  # @default -- See [values.yaml](./values.yaml)
  observability:
    _example: |
      ################################
      #                              #
      #    EXAMPLE CONFIGURATION     #
      #                              #
      ################################

      # This block is not actually functional configuration,
      # but serves to illustrate the available configuration
      # options and document them in a way that is accessible
      # to users that `kubectl edit` this config map.
      #
      # These sample configuration options may be copied out of
      # this example block and unindented to be in the data block
      # to actually change the configuration.

      # metrics.backend-destination field specifies the system metrics destination.
      # It supports either prometheus (the default) or stackdriver.
      # Note: Using stackdriver will incur additional charges
      metrics.backend-destination: prometheus

      # metrics.stackdriver-project-id field specifies the stackdriver project ID. This
      # field is optional. When running on GCE, application default credentials will be
      # used if this field is not provided.
      metrics.stackdriver-project-id: "<your stackdriver project id>"

      # metrics.allow-stackdriver-custom-metrics indicates whether it is allowed to send metrics to
      # Stackdriver using "global" resource type and custom metric type if the
      # metrics are not supported by "knative_revision" resource type. Setting this
      # flag to "true" could cause extra Stackdriver charge.
      # If metrics.backend-destination is not Stackdriver, this is ignored.
      metrics.allow-stackdriver-custom-metrics: "false"


controller:
  image:
    # controller.image.repository -- Controller docker image repository
    repository: gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/controller

    # controller.image.tag -- Controller docker image tag
    tag: v0.4.0

    # controller.image.pullPolicy -- Controller docker image pull policy
    pullPolicy: IfNotPresent

  # controller.annotations -- Controller pod annotations
  # @default -- See [values.yaml](./values.yaml)
  annotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: 'false'

  # controller.nodeSelector -- Controller node selector
  nodeSelector: {}

  # controller.affinity -- Controller affinity rules
  affinity: {}

  # controller.tolerations -- Controller tolerations
  tolerations: []

  # controller.resources -- Controller resource limits and requests
  resources: {}

  # controller.securityContext -- Controller pods security context
  securityContext: {}

  # controller.args -- Controller arguments
  # @default -- See [values.yaml](./values.yaml)
  args:
    - -logtostderr
    - -stderrthreshold
    - INFO
    - -el-image
    - gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/eventlistenersink:v0.4.0
    - -el-port
    - 8080
    - -period-seconds
    - 10
    - -failure-threshold
    - 1

  service:
    # controller.service.type -- Controller service type
    type: ClusterIP

    # controller.service.annotations -- Controller service annotations
    annotations: {}

  metrics:
    # controller.metrics.enabled -- Enable controller metrics service
    enabled: true

    # controller.metrics.port -- Controller metrics service port
    port: 9090

    # controller.metrics.service.portName -- Controller metrics service port name
    portName: metrics

webhook:
  # webhook.enabled -- Enable webhook
  enabled: true

  image:
    # webhook.image.repository -- Webhook docker image repository
    repository: gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/webhook

    # webhook.image.tag -- Webhook docker image tag
    tag: v0.4.0

    # webhook.image.pullPolicy -- Webhook docker image pull policy
    pullPolicy: IfNotPresent

  # webhook.replicas -- Webhook replicas
  replicas: 1

  # webhook.annotations -- Webhook pod annotations
  # @default -- See [values.yaml](./values.yaml)
  annotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: 'false'

  # webhook.nodeSelector -- Webhook node selector
  nodeSelector: {}

  # webhook.affinity -- Webhook affinity rules
  affinity: {}

  # webhook.tolerations -- Webhook tolerations
  tolerations: []

  # webhook.resources -- Webhook resource limits and requests
  resources: {}

  # webhook.updateStrategy -- Webhook pods update strategy
  updateStrategy: {}

  # webhook.securityContext -- Webhook pods security context
  securityContext: {}

  podDisruptionBudget:
    # webhook.podDisruptionBudget.enabled -- Enable pod disruption budget for webhook
    ennabled: false

    # webhook.podDisruptionBudget.minAvailable -- Minimum available webhook pods
    minAvailable: 1

    # webhook.podDisruptionBudget.maxUnavailable -- Maximum unavailable webhook pods
    maxUnavailable: 1

  service:
    # webhook.service.type -- Webhook service type
    type: ClusterIP

    # webhook.service.annotations -- Webhook service annotations
    annotations: {}

  metrics:
    # webhook.metrics.enabled -- Enable webhook metrics service
    enabled: true

    # webhook.metrics.port -- Webhook metrics service port
    port: 9090

    # webhook.metrics.portName -- Webhook metrics service port name
    portName: http-metrics

  profiling:
    # webhook.profiling.enabled -- Enable pebhook profiling service
    enabled: true

    # webhook.profiling.port -- Webhook profiling service port
    port: 8008

    # webhook.profiling.portName -- Webhook profiling service port name
    portName: http-profiling
