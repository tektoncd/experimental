# Copyright 2020 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Tekton

    Tekton Pipeline  # noqa: E501

    The version of the OpenAPI document: v0.17.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tekton.configuration import Configuration


class V1alpha1SecretParam(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'field_name': 'str',
        'secret_key': 'str',
        'secret_name': 'str'
    }

    attribute_map = {
        'field_name': 'fieldName',
        'secret_key': 'secretKey',
        'secret_name': 'secretName'
    }

    def __init__(self, field_name=None, secret_key=None, secret_name=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1SecretParam - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._field_name = None
        self._secret_key = None
        self._secret_name = None
        self.discriminator = None

        self.field_name = field_name
        self.secret_key = secret_key
        self.secret_name = secret_name

    @property
    def field_name(self):
        """Gets the field_name of this V1alpha1SecretParam.  # noqa: E501


        :return: The field_name of this V1alpha1SecretParam.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this V1alpha1SecretParam.


        :param field_name: The field_name of this V1alpha1SecretParam.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and field_name is None:  # noqa: E501
            raise ValueError("Invalid value for `field_name`, must not be `None`")  # noqa: E501

        self._field_name = field_name

    @property
    def secret_key(self):
        """Gets the secret_key of this V1alpha1SecretParam.  # noqa: E501


        :return: The secret_key of this V1alpha1SecretParam.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this V1alpha1SecretParam.


        :param secret_key: The secret_key of this V1alpha1SecretParam.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and secret_key is None:  # noqa: E501
            raise ValueError("Invalid value for `secret_key`, must not be `None`")  # noqa: E501

        self._secret_key = secret_key

    @property
    def secret_name(self):
        """Gets the secret_name of this V1alpha1SecretParam.  # noqa: E501


        :return: The secret_name of this V1alpha1SecretParam.  # noqa: E501
        :rtype: str
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name):
        """Sets the secret_name of this V1alpha1SecretParam.


        :param secret_name: The secret_name of this V1alpha1SecretParam.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and secret_name is None:  # noqa: E501
            raise ValueError("Invalid value for `secret_name`, must not be `None`")  # noqa: E501

        self._secret_name = secret_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1SecretParam):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1SecretParam):
            return True

        return self.to_dict() != other.to_dict()
