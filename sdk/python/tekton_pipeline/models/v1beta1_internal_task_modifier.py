# Copyright 2020 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Tekton

    Tekton Pipeline  # noqa: E501

    The version of the OpenAPI document: v0.17.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tekton_pipeline.configuration import Configuration


class V1beta1InternalTaskModifier(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'steps_to_append': 'list[V1beta1Step]',
        'steps_to_prepend': 'list[V1beta1Step]',
        'volumes': 'list[V1Volume]'
    }

    attribute_map = {
        'steps_to_append': 'StepsToAppend',
        'steps_to_prepend': 'StepsToPrepend',
        'volumes': 'Volumes'
    }

    def __init__(self, steps_to_append=None, steps_to_prepend=None, volumes=None, local_vars_configuration=None):  # noqa: E501
        """V1beta1InternalTaskModifier - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._steps_to_append = None
        self._steps_to_prepend = None
        self._volumes = None
        self.discriminator = None

        self.steps_to_append = steps_to_append
        self.steps_to_prepend = steps_to_prepend
        self.volumes = volumes

    @property
    def steps_to_append(self):
        """Gets the steps_to_append of this V1beta1InternalTaskModifier.  # noqa: E501


        :return: The steps_to_append of this V1beta1InternalTaskModifier.  # noqa: E501
        :rtype: list[V1beta1Step]
        """
        return self._steps_to_append

    @steps_to_append.setter
    def steps_to_append(self, steps_to_append):
        """Sets the steps_to_append of this V1beta1InternalTaskModifier.


        :param steps_to_append: The steps_to_append of this V1beta1InternalTaskModifier.  # noqa: E501
        :type: list[V1beta1Step]
        """
        if self.local_vars_configuration.client_side_validation and steps_to_append is None:  # noqa: E501
            raise ValueError("Invalid value for `steps_to_append`, must not be `None`")  # noqa: E501

        self._steps_to_append = steps_to_append

    @property
    def steps_to_prepend(self):
        """Gets the steps_to_prepend of this V1beta1InternalTaskModifier.  # noqa: E501


        :return: The steps_to_prepend of this V1beta1InternalTaskModifier.  # noqa: E501
        :rtype: list[V1beta1Step]
        """
        return self._steps_to_prepend

    @steps_to_prepend.setter
    def steps_to_prepend(self, steps_to_prepend):
        """Sets the steps_to_prepend of this V1beta1InternalTaskModifier.


        :param steps_to_prepend: The steps_to_prepend of this V1beta1InternalTaskModifier.  # noqa: E501
        :type: list[V1beta1Step]
        """
        if self.local_vars_configuration.client_side_validation and steps_to_prepend is None:  # noqa: E501
            raise ValueError("Invalid value for `steps_to_prepend`, must not be `None`")  # noqa: E501

        self._steps_to_prepend = steps_to_prepend

    @property
    def volumes(self):
        """Gets the volumes of this V1beta1InternalTaskModifier.  # noqa: E501


        :return: The volumes of this V1beta1InternalTaskModifier.  # noqa: E501
        :rtype: list[V1Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this V1beta1InternalTaskModifier.


        :param volumes: The volumes of this V1beta1InternalTaskModifier.  # noqa: E501
        :type: list[V1Volume]
        """
        if self.local_vars_configuration.client_side_validation and volumes is None:  # noqa: E501
            raise ValueError("Invalid value for `volumes`, must not be `None`")  # noqa: E501

        self._volumes = volumes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1InternalTaskModifier):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1InternalTaskModifier):
            return True

        return self.to_dict() != other.to_dict()
