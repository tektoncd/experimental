/*
Copyright 2021 The Tekton Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/tektoncd/experimental/celeval/pkg/apis/celeval/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CELEvalLister helps list CELEvals.
// All objects returned here must be treated as read-only.
type CELEvalLister interface {
	// List lists all CELEvals in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CELEval, err error)
	// CELEvals returns an object that can list and get CELEvals.
	CELEvals(namespace string) CELEvalNamespaceLister
	CELEvalListerExpansion
}

// cELEvalLister implements the CELEvalLister interface.
type cELEvalLister struct {
	indexer cache.Indexer
}

// NewCELEvalLister returns a new CELEvalLister.
func NewCELEvalLister(indexer cache.Indexer) CELEvalLister {
	return &cELEvalLister{indexer: indexer}
}

// List lists all CELEvals in the indexer.
func (s *cELEvalLister) List(selector labels.Selector) (ret []*v1alpha1.CELEval, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CELEval))
	})
	return ret, err
}

// CELEvals returns an object that can list and get CELEvals.
func (s *cELEvalLister) CELEvals(namespace string) CELEvalNamespaceLister {
	return cELEvalNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CELEvalNamespaceLister helps list and get CELEvals.
// All objects returned here must be treated as read-only.
type CELEvalNamespaceLister interface {
	// List lists all CELEvals in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CELEval, err error)
	// Get retrieves the CELEval from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CELEval, error)
	CELEvalNamespaceListerExpansion
}

// cELEvalNamespaceLister implements the CELEvalNamespaceLister
// interface.
type cELEvalNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CELEvals in the indexer for a given namespace.
func (s cELEvalNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CELEval, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CELEval))
	})
	return ret, err
}

// Get retrieves the CELEval from the indexer for a given namespace and name.
func (s cELEvalNamespaceLister) Get(name string) (*v1alpha1.CELEval, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("celeval"), name)
	}
	return obj.(*v1alpha1.CELEval), nil
}
